#!/usr/bin/env python3
"""
VIVI CLI - Celebrity Index Collector Control Script
One-liner to launch the entire operation
"""

import sys
import os
import subprocess
import argparse
from pathlib import Path

# Add project root to path
PROJECT_ROOT = Path(__file__).parent
sys.path.insert(0, str(PROJECT_ROOT))

class ViviCLI:
    def __init__(self):
        self.project_root = PROJECT_ROOT
        self.venv_path = self.project_root / "venv"
        self.python_exe = self.venv_path / "bin" / "python"

    def check_environment(self):
        """Check if environment is properly set up"""
        print("üîç Checking environment...")

        # Check virtual environment
        if not self.venv_path.exists():
            print("‚ùå Virtual environment not found")
            print("   Run: python3 -m venv venv")
            return False

        # Check .env file
        env_file = self.project_root / ".env"
        if not env_file.exists():
            print("‚ùå .env file not found")
            print("   Run: cp .env.example .env")
            return False

        # Check dependencies
        try:
            import streamlit
            import pandas
            import google.generativeai
            # psycopg2-binary provides the psycopg2 interface
            try:
                import psycopg2
            except ImportError:
                pass  # psycopg2-binary is installed
            print("‚úì All dependencies installed")
            return True
        except ImportError as e:
            print(f"‚ùå Missing dependency: {e}")
            print("   Run: pip install -r requirements.txt")
            return False

    def setup_database(self):
        """Initialize database"""
        print("\nüì¶ Setting up database...")
        setup_script = self.project_root / "scripts" / "setup_database.sh"

        if not setup_script.exists():
            print("‚ö†Ô∏è  Database setup script not found")
            return False

        try:
            result = subprocess.run(
                ["bash", str(setup_script)],
                cwd=str(self.project_root),
                capture_output=True,
                text=True
            )
            if result.returncode == 0:
                print("‚úì Database initialized")
                return True
            else:
                print(f"‚ö†Ô∏è  Database setup returned: {result.returncode}")
                print(result.stderr)
                return False
        except Exception as e:
            print(f"‚ùå Error during database setup: {e}")
            return False

    def collect_data(self, sample_only=True):
        """Collect celebrity data"""
        print("\nüìä Collecting data...")
        collect_script = self.project_root / "scripts" / "collect_sample_data.py"

        try:
            result = subprocess.run(
                [str(self.python_exe), str(collect_script)],
                cwd=str(self.project_root),
                timeout=600
            )
            if result.returncode == 0:
                print("‚úì Data collection complete")
                return True
            else:
                print(f"‚ö†Ô∏è  Data collection had issues (exit code: {result.returncode})")
                return True  # Continue anyway
        except subprocess.TimeoutExpired:
            print("‚ö†Ô∏è  Data collection timed out")
            return True  # Continue anyway
        except Exception as e:
            print(f"‚ùå Error during data collection: {e}")
            return True  # Continue anyway

    def launch_ui(self):
        """Launch Streamlit dashboard"""
        print("\nüöÄ Launching dashboard...")
        print("=" * 60)
        print("Dashboard will open at: http://localhost:8502")
        print("Press Ctrl+C to stop")
        print("=" * 60)

        try:
            subprocess.run(
                [str(self.python_exe), "-m", "streamlit", "run", "src/ui/app.py"],
                cwd=str(self.project_root)
            )
        except KeyboardInterrupt:
            print("\n\n‚úì Dashboard stopped")

    def run_full_operation(self):
        """Run complete operation: check -> setup -> collect -> launch"""
        print("\n" + "=" * 60)
        print("üéØ VIVI - Celebrity Index Collector")
        print("=" * 60)

        # Step 1: Check environment
        if not self.check_environment():
            print("\n‚ùå Environment check failed")
            return 1

        # Step 2: Setup database (optional, but recommended)
        print("\n‚öôÔ∏è  Database setup...")
        try:
            self.setup_database()
        except Exception as e:
            print(f"‚ÑπÔ∏è  Database setup skipped: {e}")

        # Step 3: Collect data
        try:
            self.collect_data()
        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è  Data collection cancelled by user")
        except Exception as e:
            print(f"‚ÑπÔ∏è  Data collection skipped: {e}")

        # Step 4: Launch UI
        self.launch_ui()

        return 0

    def run_ui_only(self):
        """Launch UI only"""
        if not self.check_environment():
            print("\n‚ùå Environment check failed")
            return 1

        self.launch_ui()
        return 0

    def run_collect_only(self):
        """Collect data only"""
        if not self.check_environment():
            print("\n‚ùå Environment check failed")
            return 1

        return 0 if self.collect_data() else 1

def main():
    parser = argparse.ArgumentParser(
        description="VIVI CLI - Celebrity Index Collector Control",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # Full operation (check setup, collect data, launch UI)
  ./vivi

  # Launch UI only
  ./vivi ui

  # Collect data only
  ./vivi collect

  # Setup database only
  ./vivi setup
        """
    )

    parser.add_argument(
        "command",
        nargs="?",
        default="full",
        choices=["full", "ui", "collect", "setup", "check"],
        help="Command to run (default: full)"
    )

    args = parser.parse_args()
    cli = ViviCLI()

    if args.command == "full":
        return cli.run_full_operation()
    elif args.command == "ui":
        return cli.run_ui_only()
    elif args.command == "collect":
        return cli.run_collect_only()
    elif args.command == "setup":
        return 0 if cli.setup_database() else 1
    elif args.command == "check":
        return 0 if cli.check_environment() else 1

if __name__ == "__main__":
    sys.exit(main())
